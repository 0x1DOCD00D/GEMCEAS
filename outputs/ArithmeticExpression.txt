BnfLiteral(expression, NONTERM) {
   SeqConstruct(List(GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate))))) {
      GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate))) {
         expression( SumSub->[BnfLiteral(sum_sub, NONTERM)]) {
            BnfLiteral(sum_sub, NONTERM)
            expression( SumSub->[SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
               SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
               expression( SumSub->[GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]) {
                  GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                  expression( SumSub->[sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)])]) {
                     sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)]) {
                        sum_sub( _->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])))]) {
                           SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                           RepeatPrologFact(List(product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]))) {
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          +
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[562])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[562])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[3.03])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[3.03])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+6.11])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+6.11])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-66])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          +
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-0])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-0])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+435])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+435])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[98.69])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[98.69])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[5.61])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[5.61])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+46.15])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+46.15])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-4.74])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-4.74])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(+, TERM)]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(+, TERM)
                                                   product_div( _->[+]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]) {
                                                      +
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[8.13])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(-, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(-, TERM)
                                       product_div_repetition( Sign->[-]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          -
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+8.17])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[77.24])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[77.24])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[10.63])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[10.63])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[13])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[13])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-21])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-21])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+1.34])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+1.34])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[715.13])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[715.13])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-1.63])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-])
                                        }
                                     }
                                  }
                               }
                            }
                           sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))]; _->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]) {
                              RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))
                              GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                              sum_sub( _->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))]) {
                                 product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                    product_div( _->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                       UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                       SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                       RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-969])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[-969])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[807])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[807])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+98])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[+98])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+910])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[+910])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-4])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[-4])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-5])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[-5])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-67])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[-67])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[1])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[1])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                       product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(-, TERM)]) {
                                          RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))
                                          UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                          BnfLiteral(-, TERM)
                                          product_div( _->[-]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))]) {
                                             -
                                             term( Number->[BnfLiteral(number, NONTERM)]) {
                                                term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                   BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                   term( Number->[+43.91])
                                                 }
                                              }
                                             RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))
                                             product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+43.91])]; _->[-])
                                           }
                                        }
                                     }
                                  }
                                 RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))
                                 sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))]; _->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+43.91])]; _->[-])])
                               }
                            }
                         }
                      }
                     expression( SumSub->[sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))]; _->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+43.91])]; _->[-])])]) {
                        sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[715.13])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.34])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[10.63])]; Sign->[*]), term_repetition( Term->[term( Number->[77.24])]; Sign->[*]), term_repetition( Term->[term( Number->[+8.17])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-1.63])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-4.74])]; Sign->[*]), term_repetition( Term->[term( Number->[+46.15])]; Sign->[*]), term_repetition( Term->[term( Number->[5.61])]; Sign->[*]), term_repetition( Term->[term( Number->[98.69])]; Sign->[*]), term_repetition( Term->[term( Number->[+435])]; Sign->[*]), term_repetition( Term->[term( Number->[-0])]; Sign->[*])))]; NumberOrExpression->[term( Number->[8.13])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6.11])]; Sign->[*]), term_repetition( Term->[term( Number->[3.03])]; Sign->[*]), term_repetition( Term->[term( Number->[562])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-66])]; _->[])]; Sign->[+])))]; _->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[1])]; Sign->[*]), term_repetition( Term->[term( Number->[-67])]; Sign->[*]), term_repetition( Term->[term( Number->[-5])]; Sign->[*]), term_repetition( Term->[term( Number->[-4])]; Sign->[*]), term_repetition( Term->[term( Number->[+910])]; Sign->[*]), term_repetition( Term->[term( Number->[+98])]; Sign->[*]), term_repetition( Term->[term( Number->[807])]; Sign->[*]), term_repetition( Term->[term( Number->[-969])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+43.91])]; _->[-])])
                      }
                   }
                }
             }
          }
       }
    }
 }