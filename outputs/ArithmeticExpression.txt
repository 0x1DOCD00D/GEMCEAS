BnfLiteral(expression, NONTERM) {
   SeqConstruct(List(GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate))))) {
      GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate))) {
         expression( SumSub->[BnfLiteral(sum_sub, NONTERM)]) {
            BnfLiteral(sum_sub, NONTERM)
            expression( SumSub->[SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
               SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
               expression( SumSub->[GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]) {
                  GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                  expression( SumSub->[sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)])]) {
                     sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)]) {
                        sum_sub( _->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])))]) {
                           SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                           RepeatPrologFact(List(product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]))) {
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(-, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(-, TERM)
                                       product_div_repetition( Sign->[-]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          -
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[735.38])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[735.38])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+1.30])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+1.30])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+5])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+5])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[228.07])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[228.07])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+20])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(-, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(-, TERM)
                                       product_div_repetition( Sign->[-]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          -
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[75])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[75])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[56.25])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[56.25])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+4.53])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+4.53])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[13])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[13])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-117])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-117])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+32])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+32])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-0.05])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-0.05])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+6])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(-, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(-, TERM)
                                       product_div_repetition( Sign->[-]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          -
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                            *
                                                            term( Number->[BnfLiteral(number, NONTERM)]) {
                                                               term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                  BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                  term( Number->[+2.39])
                                                                }
                                                             }
                                                            term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(+, TERM)]) {
                                                   term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(+, TERM)
                                                   product_div( _->[+]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]) {
                                                      +
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+770])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])
                                                      product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(-, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(-, TERM)
                                       product_div_repetition( Sign->[-]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          -
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+13])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+13])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[1.46])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[1.46])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[860.80])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[860.80])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-85.72])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-85.72])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(+, TERM)]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(+, TERM)
                                                   product_div( _->[+]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]) {
                                                      +
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+22])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(-, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(-, TERM)
                                       product_div_repetition( Sign->[-]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          -
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+819.87])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-7.12])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-7.12])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-4.16])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-4.16])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[26])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[26])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-23])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-23])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[8])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[8])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[63.44])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[63.44])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+3])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+3])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+6])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+6])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[5])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          +
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[238])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[238])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[8.09])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[8.09])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[4])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[4])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(+, TERM)]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(+, TERM)
                                                   product_div( _->[+]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]) {
                                                      +
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[-0.67])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          +
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[12.69])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[12.69])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[+134.60])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[+134.60])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[87.33])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[87.33])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-049.45])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-049.45])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[7.25])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+])
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                          +
                                          product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                             product_div( _->[]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-21])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-21])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-50.14])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-50.14])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[79.00])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[79.00])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[191.31])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[191.31])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[911.96])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[911.96])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                   term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                      term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                         SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                         term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                            UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                            BnfLiteral(*, TERM)
                                                            term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                               *
                                                               term( Number->[BnfLiteral(number, NONTERM)]) {
                                                                  term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                     BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                     term( Number->[-335])
                                                                   }
                                                                }
                                                               term_repetition( Term->[term( Number->[-335])]; Sign->[*])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[]) {
                                                   RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   product_div( _->[]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]) {
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[74])
                                                          }
                                                       }
                                                      RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))
                                                      product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])
                                                    }
                                                 }
                                              }
                                           }
                                          product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+])
                                        }
                                     }
                                  }
                               }
                            }
                           sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))]; _->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]) {
                              RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))
                              GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                              sum_sub( _->[product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))]) {
                                 product_div( TermRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; NumberOrExpression->[BnfLiteral(term, NONTERM)]; _->[OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                    product_div( _->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; NumberOrExpression->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))])))]) {
                                       UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                       SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                       RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[1])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[1])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[324])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[324])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[286.01])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[286.01])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[05])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[05])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+878.08])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[+878.08])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[5.82])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[5.82])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[184.14])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[184.14])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[683.11])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[683.11])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                          term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                             term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                   UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                   BnfLiteral(*, TERM)
                                                   term_repetition( Sign->[*]; Term->[term( Number->[BnfLiteral(number, NONTERM)])]) {
                                                      *
                                                      term( Number->[BnfLiteral(number, NONTERM)]) {
                                                         term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                            BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                            term( Number->[+21.20])
                                                          }
                                                       }
                                                      term_repetition( Term->[term( Number->[+21.20])]; Sign->[*])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                       product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))]; NumberOrExpression->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(+, TERM)]) {
                                          RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))
                                          UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                          BnfLiteral(+, TERM)
                                          product_div( _->[+]; NumberOrExpression->[term( Number->[BnfLiteral(number, NONTERM)])]; TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))]) {
                                             +
                                             term( Number->[BnfLiteral(number, NONTERM)]) {
                                                term( Number->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                   BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                   term( Number->[752.72])
                                                 }
                                              }
                                             RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))
                                             product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))]; NumberOrExpression->[term( Number->[752.72])]; _->[+])
                                           }
                                        }
                                     }
                                  }
                                 RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))
                                 sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))]; _->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))]; NumberOrExpression->[term( Number->[752.72])]; _->[+])])
                               }
                            }
                         }
                      }
                     expression( SumSub->[sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))]; _->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))]; NumberOrExpression->[term( Number->[752.72])]; _->[+])])]) {
                        sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-335])]; Sign->[*]), term_repetition( Term->[term( Number->[911.96])]; Sign->[*]), term_repetition( Term->[term( Number->[191.31])]; Sign->[*]), term_repetition( Term->[term( Number->[79.00])]; Sign->[*]), term_repetition( Term->[term( Number->[-50.14])]; Sign->[*]), term_repetition( Term->[term( Number->[-21])]; Sign->[*])))]; NumberOrExpression->[term( Number->[74])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-049.45])]; Sign->[*]), term_repetition( Term->[term( Number->[87.33])]; Sign->[*]), term_repetition( Term->[term( Number->[+134.60])]; Sign->[*]), term_repetition( Term->[term( Number->[12.69])]; Sign->[*])))]; NumberOrExpression->[term( Number->[7.25])]; _->[])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[4])]; Sign->[*]), term_repetition( Term->[term( Number->[8.09])]; Sign->[*]), term_repetition( Term->[term( Number->[238])]; Sign->[*])))]; NumberOrExpression->[term( Number->[-0.67])]; _->[+])]; Sign->[+]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+6])]; Sign->[*]), term_repetition( Term->[term( Number->[+3])]; Sign->[*]), term_repetition( Term->[term( Number->[63.44])]; Sign->[*]), term_repetition( Term->[term( Number->[8])]; Sign->[*]), term_repetition( Term->[term( Number->[-23])]; Sign->[*]), term_repetition( Term->[term( Number->[26])]; Sign->[*]), term_repetition( Term->[term( Number->[-4.16])]; Sign->[*]), term_repetition( Term->[term( Number->[-7.12])]; Sign->[*]), term_repetition( Term->[term( Number->[+819.87])]; Sign->[*])))]; NumberOrExpression->[term( Number->[5])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-85.72])]; Sign->[*]), term_repetition( Term->[term( Number->[860.80])]; Sign->[*]), term_repetition( Term->[term( Number->[1.46])]; Sign->[*]), term_repetition( Term->[term( Number->[+13])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+22])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[term_repetition( Term->[term( Number->[+2.39])]; Sign->[*])]; NumberOrExpression->[term( Number->[+770])]; _->[+])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[-0.05])]; Sign->[*]), term_repetition( Term->[term( Number->[+32])]; Sign->[*]), term_repetition( Term->[term( Number->[-117])]; Sign->[*]), term_repetition( Term->[term( Number->[13])]; Sign->[*]), term_repetition( Term->[term( Number->[+4.53])]; Sign->[*]), term_repetition( Term->[term( Number->[56.25])]; Sign->[*]), term_repetition( Term->[term( Number->[75])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+6])]; _->[])]; Sign->[-]), product_div_repetition( ProductDiv->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[228.07])]; Sign->[*]), term_repetition( Term->[term( Number->[+5])]; Sign->[*]), term_repetition( Term->[term( Number->[+1.30])]; Sign->[*]), term_repetition( Term->[term( Number->[735.38])]; Sign->[*])))]; NumberOrExpression->[term( Number->[+20])]; _->[])]; Sign->[-])))]; _->[product_div( TermRepetition->[RepeatPrologFact(List(term_repetition( Term->[term( Number->[+21.20])]; Sign->[*]), term_repetition( Term->[term( Number->[683.11])]; Sign->[*]), term_repetition( Term->[term( Number->[184.14])]; Sign->[*]), term_repetition( Term->[term( Number->[5.82])]; Sign->[*]), term_repetition( Term->[term( Number->[+878.08])]; Sign->[*]), term_repetition( Term->[term( Number->[05])]; Sign->[*]), term_repetition( Term->[term( Number->[286.01])]; Sign->[*]), term_repetition( Term->[term( Number->[324])]; Sign->[*]), term_repetition( Term->[term( Number->[1])]; Sign->[*])))]; NumberOrExpression->[term( Number->[752.72])]; _->[+])])
                      }
                   }
                }
             }
          }
       }
    }
 }