BnfLiteral(expression, NONTERM) {
   SeqConstruct(List(GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate))))) {
      GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate))) {
         expression( SumSub->[BnfLiteral(sum_sub, NONTERM)]) {
            BnfLiteral(sum_sub, NONTERM)
            expression( SumSub->[SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
               SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
               expression( SumSub->[GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]) {
                  GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                  expression( SumSub->[sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)])]) {
                     sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)]) {
                        sum_sub( _->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])))]) {
                           SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))
                           RepeatPrologFact(List(product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]), product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]))) {
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(term, NONTERM), OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                          +
                                          RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                          BnfLiteral(term, NONTERM)
                                          OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))
                                          product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))), SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate))))))), UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; Sign->[+]) {
                                             RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[+53.25])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[67])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[7.14])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                              }
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                             +
                                             product_div_repetition( Sign->[+]; ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(+, TERM)]) {
                                                +
                                                RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25])))
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                BnfLiteral(+, TERM)
                                                product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), BnfLiteral(number, NONTERM), +]; Sign->[+]) {
                                                   RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25])))
                                                   BnfLiteral(number, NONTERM)
                                                   +
                                                   +
                                                   product_div_repetition( Sign->[+]; ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM), +]) {
                                                      +
                                                      RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25])))
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      +
                                                      product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(term, NONTERM), OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                          +
                                          RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                          BnfLiteral(term, NONTERM)
                                          OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))
                                          product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))), SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; Sign->[+]) {
                                             RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[09])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[7.61])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-71.58])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-632.88])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-5.26])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[+5])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                              }
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             +
                                             product_div_repetition( Sign->[+]; ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]) {
                                                +
                                                RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09])))
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), BnfLiteral(number, NONTERM)]; Sign->[+]) {
                                                   RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09])))
                                                   BnfLiteral(number, NONTERM)
                                                   +
                                                   product_div_repetition( Sign->[+]; ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                      +
                                                      RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09])))
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                     }
                                  }
                               }
                              product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                 product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))]) {
                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                    SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))
                                    product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                       GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))
                                       BnfLiteral(+, TERM)
                                       product_div_repetition( Sign->[+]; ProductDiv->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(term, NONTERM), OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                          +
                                          RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                          BnfLiteral(term, NONTERM)
                                          OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))
                                          product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))), SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate))))))), UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; Sign->[+]) {
                                             RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[+612.13])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-51])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-6.87])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[9])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-56.65])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-99.75])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-0])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                                term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                   term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                      UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                      SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                      term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                         UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                         BnfLiteral(*, TERM)
                                                         term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                            *
                                                            BnfLiteral(number, NONTERM)
                                                            term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                               BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                               *
                                                               term_repetition( Sign->[*]; Term->[-1])
                                                             }
                                                          }
                                                       }
                                                    }
                                                 }
                                              }
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                             +
                                             product_div_repetition( Sign->[+]; ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(-, TERM)]) {
                                                +
                                                RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13])))
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                BnfLiteral(-, TERM)
                                                product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), BnfLiteral(number, NONTERM), -]; Sign->[+]) {
                                                   RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13])))
                                                   BnfLiteral(number, NONTERM)
                                                   -
                                                   +
                                                   product_div_repetition( Sign->[+]; ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM), -]) {
                                                      +
                                                      RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13])))
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      -
                                                      product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                     }
                                  }
                               }
                            }
                           sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))]; _->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))]) {
                              RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))
                              GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))
                              sum_sub( _->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(term, NONTERM), OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))]) {
                                 RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                 BnfLiteral(term, NONTERM)
                                 OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))
                                 RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))
                                 sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))]; _->[RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))), SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                    RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))
                                    RepeatPrologFact(List(term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]))) {
                                       term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                          term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                BnfLiteral(*, TERM)
                                                term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                   *
                                                   BnfLiteral(number, NONTERM)
                                                   term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      *
                                                      term_repetition( Sign->[*]; Term->[550.72])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                       term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                          term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(/, TERM)]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                BnfLiteral(/, TERM)
                                                term_repetition( Sign->[/]; Term->[BnfLiteral(number, NONTERM)]) {
                                                   /
                                                   BnfLiteral(number, NONTERM)
                                                   term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[/]) {
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      /
                                                      term_repetition( Sign->[/]; Term->[82])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                       term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                          term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(/, TERM)]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                BnfLiteral(/, TERM)
                                                term_repetition( Sign->[/]; Term->[BnfLiteral(number, NONTERM)]) {
                                                   /
                                                   BnfLiteral(number, NONTERM)
                                                   term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[/]) {
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      /
                                                      term_repetition( Sign->[/]; Term->[-976.70])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                       term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                          term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                             term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(/, TERM)]) {
                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                BnfLiteral(/, TERM)
                                                term_repetition( Sign->[/]; Term->[BnfLiteral(number, NONTERM)]) {
                                                   /
                                                   BnfLiteral(number, NONTERM)
                                                   term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[/]) {
                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                      /
                                                      term_repetition( Sign->[/]; Term->[+2.10])
                                                    }
                                                 }
                                              }
                                           }
                                        }
                                     }
                                    SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                    sum_sub( _->[RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72]))), UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))]) {
                                       RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72])))
                                       UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                       RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))
                                       sum_sub( ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))]; _->[RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72]))), term( _->[BnfLiteral(), TERM)]; Expression->[BnfLiteral(expression, NONTERM)]; _->[BnfLiteral((, TERM)])]) {
                                          RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))
                                          RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72])))
                                          term( _->[BnfLiteral(), TERM)]; Expression->[BnfLiteral(expression, NONTERM)]; _->[BnfLiteral((, TERM)]) {
                                             term( _->[(]; Expression->[SeqConstruct(List(GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[)]) {
                                                (
                                                SeqConstruct(List(GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                                )
                                                term( _->[)]; Expression->[GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate)))]; _->[(]) {
                                                   )
                                                   GroupConstruct(List(BnfLiteral(sum_sub, NONTERM), PrologFactsBuilder(PrologTemplate)))
                                                   (
                                                   term( _->[(]; Expression->[expression( SumSub->[BnfLiteral(sum_sub, NONTERM)])]; _->[)]) {
                                                      (
                                                      expression( SumSub->[BnfLiteral(sum_sub, NONTERM)]) {
                                                         expression( SumSub->[SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))]) {
                                                            SeqConstruct(List(GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))))
                                                            expression( SumSub->[GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))]) {
                                                               GroupConstruct(List(BnfLiteral(product_div, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate))))), PrologFactsBuilder(PrologTemplate)))
                                                               expression( SumSub->[sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)])]) {
                                                                  sum_sub( ProductDivRepetition->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(product_div, NONTERM), PrologFactsBuilder(PrologTemplate)))))]; _->[BnfLiteral(product_div, NONTERM)]) {
                                                                     sum_sub( _->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))]; ProductDivRepetition->[product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))])]) {
                                                                        SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))
                                                                        product_div_repetition( ProductDiv->[BnfLiteral(product_div, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                                                           product_div_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))]; ProductDiv->[SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))]) {
                                                                              UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))
                                                                              SeqConstruct(List(GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))))
                                                                              product_div_repetition( ProductDiv->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))]; Sign->[BnfLiteral(+, TERM)]) {
                                                                                 GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))
                                                                                 BnfLiteral(+, TERM)
                                                                                 product_div_repetition( Sign->[+]; ProductDiv->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(term, NONTERM), OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]) {
                                                                                    +
                                                                                    RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                                                                    BnfLiteral(term, NONTERM)
                                                                                    OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))
                                                                                    product_div_repetition( ProductDiv->[term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]; Sign->[+]) {
                                                                                       term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                                                          term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                                                             UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                                                             SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                                                             term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                                                                UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                                                                BnfLiteral(*, TERM)
                                                                                                term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                                                                   *
                                                                                                   BnfLiteral(number, NONTERM)
                                                                                                   term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                                                                      BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                                                      *
                                                                                                      term_repetition( Sign->[*]; Term->[+9.94])
                                                                                                    }
                                                                                                 }
                                                                                              }
                                                                                           }
                                                                                        }
                                                                                       SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                                                       +
                                                                                       product_div_repetition( Sign->[+]; ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]) {
                                                                                          +
                                                                                          term_repetition( Sign->[*]; Term->[+9.94])
                                                                                          UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                                                          product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), BnfLiteral(number, NONTERM)]; Sign->[+]) {
                                                                                             term_repetition( Sign->[*]; Term->[+9.94])
                                                                                             BnfLiteral(number, NONTERM)
                                                                                             +
                                                                                             product_div_repetition( Sign->[+]; ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]) {
                                                                                                +
                                                                                                term_repetition( Sign->[*]; Term->[+9.94])
                                                                                                BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                                                product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                                              }
                                                                                           }
                                                                                        }
                                                                                     }
                                                                                  }
                                                                               }
                                                                            }
                                                                         }
                                                                        sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))]) {
                                                                           product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                           GroupConstruct(List(OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM))))))), BnfLiteral(term, NONTERM), RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), MetaVariable(PrevProductDiv, List(sum_sub, product_div), Some(2)), PrologFactsBuilder(PrologTemplate)))
                                                                           sum_sub( _->[RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate))))), BnfLiteral(term, NONTERM), OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))]; ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]) {
                                                                              RepeatConstruct(List(GroupConstruct(List(GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM))))))), BnfLiteral(term, NONTERM), PrologFactsBuilder(PrologTemplate)))))
                                                                              BnfLiteral(term, NONTERM)
                                                                              OptionalConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(+, TERM))), GroupConstruct(List(BnfLiteral(-, TERM)))))))
                                                                              product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                              sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]), SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                                                 product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                                 term_repetition( Term->[BnfLiteral(term, NONTERM)]; Sign->[GroupConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))))]) {
                                                                                    term_repetition( Sign->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))]; Term->[SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))]) {
                                                                                       UnionConstruct(List(GroupConstruct(List(BnfLiteral(*, TERM))), GroupConstruct(List(BnfLiteral(/, TERM)))))
                                                                                       SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                                                       term_repetition( Term->[UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; Sign->[BnfLiteral(*, TERM)]) {
                                                                                          UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                                                          BnfLiteral(*, TERM)
                                                                                          term_repetition( Sign->[*]; Term->[BnfLiteral(number, NONTERM)]) {
                                                                                             *
                                                                                             BnfLiteral(number, NONTERM)
                                                                                             term_repetition( Term->[BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; Sign->[*]) {
                                                                                                BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                                                *
                                                                                                term_repetition( Sign->[*]; Term->[8.88])
                                                                                              }
                                                                                           }
                                                                                        }
                                                                                     }
                                                                                  }
                                                                                 SeqConstruct(List(UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))))
                                                                                 sum_sub( _->[term_repetition( Sign->[*]; Term->[8.88]), UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))]; ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]) {
                                                                                    term_repetition( Sign->[*]; Term->[8.88])
                                                                                    UnionConstruct(List(GroupConstruct(List(BnfLiteral(number, NONTERM), MetaVariable(PrevTerm, List(product_div, term), Some(2)), PrologFactsBuilder(PrologTemplate))), GroupConstruct(List(BnfLiteral((, TERM), BnfLiteral(expression, NONTERM), BnfLiteral(), TERM), PrologFactsBuilder(PrologTemplate)))))
                                                                                    product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                                    sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), BnfLiteral(number, NONTERM)]) {
                                                                                       product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                                       term_repetition( Sign->[*]; Term->[8.88])
                                                                                       BnfLiteral(number, NONTERM)
                                                                                       sum_sub( _->[term_repetition( Sign->[*]; Term->[8.88]), BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)]; ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]) {
                                                                                          term_repetition( Sign->[*]; Term->[8.88])
                                                                                          BnfLiteral([\-\+]?[0-9]{1,3}(\.[0-9]{2})?, REGEXTERM)
                                                                                          product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])
                                                                                          sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), -11.47])
                                                                                        }
                                                                                     }
                                                                                  }
                                                                               }
                                                                            }
                                                                         }
                                                                      }
                                                                   }
                                                                  expression( SumSub->[sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), -11.47])])
                                                                }
                                                             }
                                                          }
                                                       }
                                                      )
                                                      term( _->[)]; Expression->[expression( SumSub->[sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), -11.47])])]; _->[(])
                                                    }
                                                 }
                                              }
                                           }
                                          sum_sub( _->[RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72]))), term( _->[)]; Expression->[expression( SumSub->[sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), -11.47])])]; _->[(])]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))])
                                        }
                                     }
                                  }
                               }
                            }
                         }
                      }
                     expression( SumSub->[sum_sub( _->[RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72]))), term( _->[)]; Expression->[expression( SumSub->[sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), -11.47])])]; _->[(])]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))])]) {
                        sum_sub( _->[RepeatPrologFact(List(term_repetition( Sign->[/]; Term->[+2.10]), term_repetition( Sign->[/]; Term->[-976.70]), term_repetition( Sign->[/]; Term->[82]), term_repetition( Sign->[*]; Term->[550.72]))), term( _->[)]; Expression->[expression( SumSub->[sum_sub( ProductDivRepetition->[product_div_repetition( ProductDiv->[term_repetition( Sign->[*]; Term->[+9.94]), 150]; Sign->[+])]; _->[term_repetition( Sign->[*]; Term->[8.88]), -11.47])])]; _->[(])]; ProductDivRepetition->[RepeatPrologFact(List(product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[-1]), term_repetition( Sign->[*]; Term->[-0]), term_repetition( Sign->[*]; Term->[-99.75]), term_repetition( Sign->[*]; Term->[-56.65]), term_repetition( Sign->[*]; Term->[9]), term_repetition( Sign->[*]; Term->[-6.87]), term_repetition( Sign->[*]; Term->[-51]), term_repetition( Sign->[*]; Term->[+612.13]))), +92, -]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[+5]), term_repetition( Sign->[*]; Term->[-5.26]), term_repetition( Sign->[*]; Term->[-632.88]), term_repetition( Sign->[*]; Term->[-71.58]), term_repetition( Sign->[*]; Term->[7.61]), term_repetition( Sign->[*]; Term->[09]))), 4]; Sign->[+]), product_div_repetition( ProductDiv->[RepeatPrologFact(List(term_repetition( Sign->[*]; Term->[7.14]), term_repetition( Sign->[*]; Term->[67]), term_repetition( Sign->[*]; Term->[+53.25]))), +280.68, +]; Sign->[+])))])
                      }
                   }
                }
             }
          }
       }
    }
 }