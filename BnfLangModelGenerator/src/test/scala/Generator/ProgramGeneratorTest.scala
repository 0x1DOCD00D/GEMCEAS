/*
 Copyright (c) 8/6/23, 10:09 AM by Mark Grechanik (drmark) and Lone Star Consulting, Inc. All rights reserved.

 Licensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.
 */

package Generator

import Compiler.{BnfLiteral, GroupConstruct, OptionalConstruct, ProductionRule, RepeatConstruct, SeqConstruct, UnionConstruct}
import ExtendedAEParser.{opt, parseAll, rep}
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.Matchers

import scala.util.parsing.combinator.JavaTokenParsers


object ExtendedAEParser extends JavaTokenParsers:
  import scala.util.parsing.combinator.*
  def expr: Parser[Any] = opt("+"|"-")~term~rep("+"~term | "-"~term)
  def term: Parser[Any] = factor~rep("*"~factor | "/"~factor)
  def factor: Parser[Any] = rep("+"|"-") ~ floatingPointNumber | rep("+"|"-") ~ "("~expr~")"
  def parseArithExp(expression: String): Either[String, ParseResult[Any]] = parseAll(ExtendedAEParser.expr, expression) match
      case failed: Failure => Left(failed.msg)
      case success => Right(success)

class ProgramGeneratorTest extends AnyFlatSpec with Matchers {
  behavior of "the program generator"

  val expression1: String  = "+(-+13   * -013++(-2-1)/3.12)"
  val expressionIncorrect: String = "+(-+13   * -013++(-2-1)/3.12))"
  val expression2: String = "(-818266039676195025285.7445582919*+7541412470042108557678663247133688969649202191691829793485893800043302368062026524573674182++892854875539548791939113314554240640862888123808084836240418062.134508116798682553065268632720674996507572653972404302014958131849683931019809--17313453017672485115880537361788461655619094189996957829598295063947432931234498320790824572.4987--235874894897715046671559699.72132070217155882837938++523010955220781703345809258863170788202459683794439267381210486702289.3205754082061826322477834779372262660277124895405305945164988271300404798988193858753479--3808053261988442767045230714139675547698912564294730939690842434124224183513432726630858926393514705-+79893356-+67698881001276796898085494799646386155714239969469177652854344608821083455274312058064263175178.4823947240169-50427148931242949668736510432207283016661231135548320172458473448-1504310)++-772545855408106798885350.102287187917443513683684109110335300930532675946525515184797997310151179770520312854054/+07297.037801377733822510769460071084871507131834/(-3926510733002050325283543579834494494691703856596637504779305595913955520178882682075.18262770594369830044786913+957557257381509362454848355002803356967090524706383319451322537574444623542866193464622403+8496185734.362656719812002461436009890++4186765973882359549082057032373265728551252091026503758888411297743551260714539.162446246869934509363353759799+447896328519679146195811185278577249369791895771115860049621518981344467894017154976368888319.931516503907888270448230464841975546536810576314328734582383279775846110292816827++29770602191561.803405751424995692292902712067343570547904314539335178288595266202+21873698118348471380328373254322182521011099589912142770068+-0956256754695647395134625657218290.369110202230912887788259650063546465882860769+-56225816519079489873493087723)*(912+560118639224234726409296510143495189887107320313641645348383407607.957076772610109238462844451811625293357556130+660024888717439751246739562986426155705115911090080007880605189494140504968110.75914535276834290265722929409436942462305461671421968627455388869018020034+075122365113918510751916738538576232152299451754695553016085639783232462221558807918+3826595+11049616879+15798713989630076361626014500477096990766643927066995296027940433414148290450649818670347.200885608020721715460803633265440680825197470003126782784614210750855534596++74258536292557259499166181775494281185796548535201831.847919996879102435485983223366314555451022325287757004988174988424700++413)*+7084056077147904092.71851139903*(3887545983)/(9852057278105394266691122022562160163961591700378836485213902321231876990886368657.77610759454824051805461324578583578462834508355415582747972078775567+75462571437771807115255095434855321337179874384097760772072773613232186760679288.07966334811234575687437941470234066752883041176929++5460740020181951558990445166737960352036517478677744435551537717116237630+892946308259266803641977470.35354571265133909816684216763809187066135974355761534748446679953462+-84085866325420804339501777161255904523666)*3882001533984709530068242.39473994488118303610252396023894429235904671815635217513883033471879120786467868827316576573+(6963467922747280756252143360628126332527492829614869379449529064389448028182.25822523871547327251570658331572674145585680191997136824339011938296924088526452408506812663146+0576090567522207223839984357+-6757695930406942689610065005804695856000+855052665513630313525606928151663236264603927051210057424886184296161083486.4419000777865280176002004518++06031508297736379331346179+-701411420408221314945206943145270224848533311520987187264035160.9837445278875480958371137665862800992445572408+-128763762281104897440623.59732029665829++75164525504173713948054634860042927775264049736262226604860++2348724293556843670056572049356622504697212835734055855025726520974261.836446849097278080075534586834975044502330816270266748)*7507/(92490044640334871463143890731310876660780092109129943+-6943+-50412933787277117852110297344412477132146022500341210485895705105813277198+35772879385893829811928905827541776480745.338986370245970289250261271562874608969387702582864357596140172706238909+-131810861351343617671723745284007829449369312533565898+541++08752690691607542489651896749570947140000009.836781778007234537178721937695067588726457119497695826813019364467235506465)*(-757305123838723689707628733318437054703243235443940170447.692788758374713445640034934170007312633+3872632117517958.82959245515281450647652144435923851989123783287074737395568218356386434330182+0789216320436314610265791406973752332192225002118397617065874593235+562780274962803428886183166191626069365164182148348839929593569587165982.55224460846630301995846687758439741+60316636991177815513994301416465184.62863990541207663119254178117012882888501735307564346899508851456435936931891259+3667499334988825270182425969536709999159360432830825657933556009192200652413072378408416670528432966+749579739437523880829318146193135362036329817420357924400116431079614.679135180778259359545776346131386933044249831017525585576962723+-2759456399956640575269900065541338766540197.3774707938489698227344929489468909330237116214868196391429962850283370+422986207049113097488849146617642+-57864208730082808109510708086386964805402567)*-25024162023553916570106939903611061621504622745767922198948705908360831806505871*706385180695841897036556519132743583189812.199248590507645285194376348978918960757182001335/6003583357832761949779214627955641403034180.80488061432575163995006387541466/-4368558518709979939568015301902410876815313933753997157736710724808613697488659.175615623072844029953394439871237536507192*(+22931316421300990453378787745640652.03823796142634558569773444760346963365639423+21040810370167+8763314594148793409411828156996215++0993726949633502605037013.3250391868951936849947463788785512224195969207204671371734253637262331003531658669152703932+9307244265052133772551329474239980448844518761647750469796676451393249993306+32008968354++89278823667262257072806848101708737783770155)+(7456107481196361807512586+92884480413689074517317250384753640501322026161294545.74240942429203113955501442031541547320+27691562099486358734230485549195353.49163277245669597718065060015861205371399853556246221458363785+-06.3217076893738772428663966676653418292189475927987462213273174916046736406+-4182568334697845184993362078440723380502795835552927640466689570563)/+11463906525241975981322587970062217147614916392446016506.68026298766992471386512352421359639063025023331211839054048139134473791"
  val expression3: String = "(-+1285216445391496523486390551717582186288607478729718883407433343329957240670827610675934*938170055495537++490404807446029676010081952203094250548013777814172705183043217111690689017697089.263816485793326523712595573273573513984178859972667310656460961320688174528241618587218--9853667652570253593228265-+5147090755589570130405527930426694386587351998102586098557969306578729932840421933868+-066201024703407502464647809071619512275174335771120993073743990481855720541618601946010149291043.1740056824726-081828055254814836430862072865686339185974358002839599908199100661--91148939291356249244098898832048874423774955654339-+72307816355878114056700559909851307.41299413334761348994047377685986385730561014002390-891965451585471560126506942694270570292448400978484379911660426801141631249229439436311.3230010855338022141475996--8940672422769467187.2609936105357)++39190148369415369141621.270235343800631744152336951139196863537264552406/0998404372336180189587857805015015818958946298655020186723971985464892/(+01960+47+28.112609045418+-73954198103056387223828338795162556273897745444381324952119659952163381066868332629569502+20284548954131579680300764661810548107867307771753021067406187817599273323035839402075154723++528893275550654792129727325109++17252644444971027239160575119371670616898.12155462031531366487265572222669520435857948101455758+202918511321525269754659160543409237435953098002200122585746544157726883166494270+46650098846992056381749146162890)*(-54558)*+76630154775156740313607371918308447550932901566212098163035184394740222270390689742*(9405968955471204881923277058441292278.014600647028050406399369255648899233274354873685279+761828059675542184708453.268038528091756045175958312674624449235369871894559+80037253398788631419649379138669881401643548205034469132105665954440725.59771216575177944732161679723788470310123501801119020784740666534705+-330944826722923698861744266169583376961589392884509952451004.14603948+47183320239783785069007094420889217112145086922)/(+07309970025392994971489088252080742745239825014761215++115320.076232016114237846084317409439119629636659846053602762685291390815171630696134608589709949524611++0490723969.3595703873+6599744922673572167002022920823809570823566276969844661963878677964305512344880176165876090291+51496162409134560106814648206059979694455419057+683329376263275284736959511323248665966593313934456496715735287898+-96991374140523560363642234343890063628672046760520114573192149612741105414703149220498841802)*+605897457529883484330208029195444529470318456484312433253826432202123049683617.994403486684230967790334618599430474375564268109829179514186811619608162558970573558++(5861557522168493955678795000199161054287364557320087611+3667563203703863194765381799703389350676.13078215772233990099046387+-346734802391133019249187962497139202446199524218137688445465380028882846091521003803613292005281.40902971730792183166626853130251042335734406027666+45098029550765679555387755+76646400427456++4840050970061046678324339114949714392682558190261104956140270971776098015420812008791053.6530253619594053191063037049126460436173366711968631801054741365895160541334647600843010463+-466085731201151016396387770444875832423064+66380837409826529618470403626760742787288786928538697515617649357844758284303531174292014.18139538490306256089300162389490509813744724832003752741157+050743614131804925278318573975906615121578718086942471977276458.5025859941185450064460326838)*-329247795798828733072626918407496621929846.1520574109164344392829111093427877774124432483452196564520083201454938040/(+7914722475706238270245443407342760152706395468845501435++32123700.043434229170265549991455704571803250780369454207984599654194755962884750197381736560020+-8198754881343080254609177512958866.96107871228580173026116114515245458422661383848955255204678342125266079611278574698459543936+46.8823107684587272751577317403901264796172654884282910315497++041776891981084883547375677332975604123804433++29965876066678546834416679577563820705738920622425422908667398084859051990817675132488400172+80856365778154836515988851836687750815681024303.857731493507269917988894961922173476+770865659492490502624516828609955270569628447650559348693745563308127586624093707759321406972813.70171478632552025518125823773570021569539108529250115210744564252413165963550685618010441878+-08235996039032940764540114621413835530683050792898678618778+91861692936778132698377239207893596558479794)*(24+90927148345261825084274963256435801897.73768919499014864779669576643179916616+7218467521949181195720563716960608821162157.435620150410385489357051402932467303502950758271663411210626+111263600254146401.41061317014849490495741787418952929812114348985804668330159214379879196+839934851328387277385879642826878823089146571.73372818335238470690100+1592799990508169348565070399111916980171910260860295412753962447944894421+-4894146670863177204031429894269833029975707782418471095750101516330274605)*269145588122470727119694520905962308041502135670200392088682766544281125783082*2026673268875266972439758454660815582735319339724065384329106185.339062849272015367650251587332735147028320259094/1588323626211399474970629937472616437214691936866535756491/-90905746873770199058758592414414284252386762133029012411.51565456236091261319605636176539063484432676657466738911468142569076*(47659709282812716+-187378024221509994823685.16222276251650286489172504176615533856469573088087737601865956208069962508145896283670+688911693497914942.333493682439578909012561707543669300743280010361+663475215589604689157122345919461144970679562945.902564845550625656288787964241402460887464059076643++47351546297838055532349773942390901282684953582744680044595592229324.6273515959881098303187333900193630113611257054778221526412417406307433)+(33124319453899515964334734829462854240264872895631422762880254317280.327866669446460238763942581981462868058058735564675871214861958514496792787+-778138+-854087877711115824202109415934500596310167613110417723564292966274817075+5209863461779625086395039299528639002070138525612968477828839905+59171321070925.79928317894201134762069959670007016756092793687495156820785828254)/-2848742008032724941670090"

  import Compiler.LiteralType.*

  /*
  expression ::= sum_sub;
  sum_sub ::= product_div {("+"|"-") product_div};
  product_div ::= ["+"|"-"] term {("*"|"/") term};
  term ::= number | "(" expression ")";
  <number> ::= "(\+|\-)?[0-9]+(\.[0-9]+)?";
  */
  val grammar = List(
    ProductionRule(BnfLiteral("expression", NONTERM),
      SeqConstruct(List(
        GroupConstruct(List(
          BnfLiteral("sum_sub", NONTERM))
        ))
      )
    ),
    ProductionRule(BnfLiteral("sum_sub", NONTERM),
      SeqConstruct(List(
        GroupConstruct(List(
          BnfLiteral("product_div", NONTERM),
          RepeatConstruct(List(
            GroupConstruct(List(
              GroupConstruct(List(
                UnionConstruct(List(
                  GroupConstruct(List(
                    BnfLiteral("+", TERM))
                  ),
                  GroupConstruct(List(
                    BnfLiteral("-", TERM))
                  ))
                ))
              ),
              BnfLiteral("product_div", NONTERM))
            ))
          ))
        ))
      )
    ),
    /*
    product_div ::= ["+"|"-"] term {("*"|"/") term};
    term ::= number | "(" expression ")";
    <number> ::= "(\+|\-)?[0-9]+(\.[0-9]+)?";
    */
    ProductionRule(
      BnfLiteral("product_div", NONTERM),
      SeqConstruct(List(
        GroupConstruct(List(
          OptionalConstruct(List(
            UnionConstruct(List(
              GroupConstruct(List(
                BnfLiteral("+", TERM))
              ),
              GroupConstruct(List(
                BnfLiteral("-", TERM))
              ))
            ))
          ),
          BnfLiteral("term", NONTERM),
          RepeatConstruct(List(
            GroupConstruct(List(
              GroupConstruct(List(
                UnionConstruct(List(
                  GroupConstruct(List(
                    BnfLiteral("*", TERM))
                  ),
                  GroupConstruct(List(
                    BnfLiteral("/", TERM))
                  ))
                ))
              ),
              BnfLiteral("term", NONTERM))
            ))
          ))
        ))
      )
    ),
    /*
    term ::= number | "(" expression ")";
    <number> ::= "(\+|\-)?[0-9]+(\.[0-9]+)?";
    */
    ProductionRule(
      BnfLiteral("term", NONTERM),
      SeqConstruct(List(
        UnionConstruct(List(
          GroupConstruct(List(
            BnfLiteral("number", NONTERM))
          ),
          GroupConstruct(List(
            BnfLiteral("(", TERM),
            BnfLiteral("expression", NONTERM),
            BnfLiteral(")", TERM))
          ))
        ))
      )
    ),
    ProductionRule(
      BnfLiteral("number", NTREGEX),
      BnfLiteral("""([+]|[-])?[0-9]+(\.[0-9]+)?""", REGEXTERM)
    )
  )

  it should s"parse a simple expression: $expression1" in {
    ExtendedAEParser.parseArithExp(expression1).isRight shouldBe true
  }

  it should s"fail to parse an incorrect expression: $expressionIncorrect" in {
    ExtendedAEParser.parseArithExp(expressionIncorrect).isLeft shouldBe true
  }

  it should s"parse a large generated expression: $expression2" in {
    ExtendedAEParser.parseArithExp(expression2).isRight shouldBe true
  }

  it should s"parse a large generated expression: $expression3" in {
    ExtendedAEParser.parseArithExp(expression3).isRight shouldBe true
  }

  it should s"generate an expression and parse it" in {
    val gen = ProgramGenerator(grammar, BnfLiteral("expression", NONTERM))
    if gen.isLeft then assert(false)
    else
      val code = gen.getOrElse(expressionIncorrect).asInstanceOf[GeneratedProgram].mkString
      ExtendedAEParser.parseArithExp(code).isRight shouldBe true
  }
}